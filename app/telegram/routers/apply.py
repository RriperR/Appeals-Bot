from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from sqlalchemy import select

from app.telegram.states.appeal import AppealFSM
from app.telegram.keyboards import commissions_inline
from app.db.session import async_session


router = Router()

@router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
async def apply_start(m: types.Message, state: FSMContext):
    async with async_session() as session:
        rows = (await session.execute(
            select(m.Commission.id, m.Commission.title).where(m.Commission.is_active == True)  # noqa
        )).all()
        if not rows:
            await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        kb = commissions_inline([(r[0], r[1]) for r in rows])
    await state.set_state(AppealFSM.choose_commission)
    await m.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é:", reply_markup=ReplyKeyboardRemove())
    await m.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∏—Å—Å–∏–π:", reply_markup=kb)

@router.callback_query(AppealFSM.choose_commission, F.data.startswith("commission:"))
async def choose_commission(c: types.CallbackQuery, state: FSMContext):
    cid = int(c.data.split(":")[1])
    await state.update_data(commission_id=cid)
    await state.set_state(AppealFSM.ask_contact)
    await c.message.edit_text("üì≤ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email (–∏–ª–∏ ¬´-¬ª –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è).")

@router.message(AppealFSM.ask_contact)
async def save_contact(m: types.Message, state: FSMContext):
    contact = None if m.text.strip() == "-" else m.text.strip()
    await state.update_data(contact=contact)
    await state.set_state(AppealFSM.ask_text)
    await m.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):")

@router.message(AppealFSM.ask_text, F.text.len() >= 20)
async def receive_text(m: types.Message, state: FSMContext):
    await state.update_data(text=m.text.strip())
    await state.set_state(AppealFSM.ask_file)
    await m.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
